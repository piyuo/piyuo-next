name: 🤖 AI Assist Issue
description: Let AI assist you in creating a professional GitHub issue...
body:

  - type: checkboxes
    id: checklist
    attributes:
      label: Pre-flight Checklist
      description: Please ensure you've completed these steps before submitting
      options:
        - label: I have searched existing issues to ensure this is not a duplicate
          required: true
        - label: I have read the contributing guidelines
          required: true

  - type: markdown
    attributes:
      value: |
        ---
        1. **Fill in your raw idea/bug above**
        2. **Copy both sections (your input and the AI guide) into any AI assistant** (ChatGPT, Claude, Gemini, etc.)
        3. **Copy the AI's markdown result back to description to replace content**
        4. **Move the first line to the Title Field** - the AI will generate the title as the first line
        5. **Review the AI-generated content** – the AI might generate too much or make assumptions; change it if needed
        6. **Create a new issue** with that enhanced content
        The AI will transform your simple description into a professional GitHub issue! 🚀

  - type: textarea
    id: description
    attributes:
      label: AI Assist
      value: |

        Start typing your raw idea or bug report below.


        # 🤖 AI Issue Assistant

        This document is for AI agents to convert raw user input into a complete GitHub issue using one of three predefined templates.

        ---

        ## Input

        1. Raw user text: description of a bug, feature idea, or documentation issue.
        2. This guide (used by the AI to decide and format).

        ---

        ## Steps for AI

        1. **Classify the Issue**

          * 🐛 Bug Report → keywords: crash, error, broken, unexpected
          * ✨ Feature Request → keywords: add, improve, implement
          * 📚 Documentation → keywords: doc, missing, unclear, typo

        2. **🧠 AI Enhancement Mode - BE THE EXPERT**

          **You are a senior technical writer and software architect. Improve the user's raw input by:**

          * **Clarify vague descriptions** - turn "make it better" into specific, actionable requirements
          * **Add technical context** - explain WHY the feature/fix matters from a development perspective
          * **Structure the problem clearly** - break down complex issues into digestible parts
          * **Suggest best practices** - recommend implementation approaches when appropriate
          * **Use developer-friendly language** - write for the engineering team who will work on this
          * **Anticipate edge cases** - mention potential complications or considerations
          * **Prioritize based on impact** - help assess real business/technical value

          **Transform user concepts into professional, developer-ready specifications.**

        3. **Select Template Fields** (template structure included below)

        4. **Smart Field Completion**

          * **For missing technical details**: Use your expertise to fill gaps intelligently
          * **Only ask users for**: specific environmental details (OS, version, steps) that you cannot infer
          * **For optional fields**: Provide thoughtful content instead of `_User didn't provide._` when you can add value

        5. **Generate Enhanced Markdown Output**

          * Start with a single-line title The format should be:

            * `fix: [summary]` for bug reports
            * `feat: [summary]` for feature requests
            * `docs: [summary]` for documentation issues
          * **The summary must be written in lowercase**, no punctuation at the end.
          * Make the summary clear, specific, and action-focused.
          * **DO NOT add "Title:" prefix** - just write the title directly
          * Then use GitHub markdown formatting for the rest.
          * Use bold headings for each field section.
          * **Write like a senior developer** - use technical precision and clarity

        ## ⚠️ CRITICAL OUTPUT FORMATTING INSTRUCTION

        **ALWAYS wrap the final GitHub issue in a code block with `markdown` language specification like this:**

        ````
        ```markdown
        fix: your title here

        **Your Content Here**
        etc.
        ```
        ````

        **This ensures users can copy the raw markdown text directly without HTML rendering interference.**

        ---

        ## Template Structures

        ### 🐛 Bug Report

        * **Bug Description** *(required)*
        * **Steps to Reproduce** *(required)*
        * **Expected Behavior** *(required)*
        * **Actual Behavior** *(required)*
        * **Severity** *(required: Low, Medium, High, Critical)*
        * **Version** *(required)*
        * **OS** *(required: Windows, macOS, iOS, Android, Linux, Other)*
        * **Browser** *(optional: Chrome, Firefox, Safari, Edge, Other, N/A)*
        * **Logs** *(optional)*
        * **Screenshots** *(optional)*
        * **Additional Context** *(optional)*

        ### ✨ Feature Request

        * **Problem Statement** *(required - AI should articulate the underlying business/technical problem clearly)*
        * **Proposed Solution** *(required - AI should suggest implementation approach and technical considerations)*
        * **Priority** *(required: Low, Medium, High, Critical - AI should assess based on impact and complexity)*
        * **Additional Context** *(AI should add technical considerations, potential challenges, or related features)*

        ### 📚 Documentation

        * **Documentation Issue Type** *(required: Missing, Incorrect, Unclear, Typo, Broken link, etc.)*
        * **Documentation Location** *(required)*
        * **Current Documentation** *(optional)*
        * **Proposed Change / Expected Documentation** *(required)*
        * **Why is this change needed?** *(optional)*
        * **Priority** *(required: Low, Medium, High, Critical)*

        ---

        ## Output Example

        ````markdown
        ```markdown
        fix: app crashes on submit

        **Bug Description**
        App crashes when clicking the "Submit" button.

        **Steps to Reproduce**
        1. Open the app
        2. Click Submit
        3. Crash

        **Expected Behavior**
        Submit should succeed.

        **Actual Behavior**
        App crashes.

        **Severity**
        High - Breaks functionality

        **Version**
        v1.2.3

        **OS**
        macOS

        **Browser**
        Safari

        **Logs**
        [Error] SubmitButton -> null

        **Screenshots**
        _User didn't provide._

        **Additional Context**
        Started after the latest update.
        ```
        ````

        ---

        ## Alternative Output Instructions

        If the AI platform supports it, you can also instruct the AI to:

        1. **Use a "Copy-friendly" format**: Add a note saying "Here's your GitHub issue ready to copy:"
        2. **Provide both versions**: Show the rendered version for review, then the raw markdown in a code block
        3. **Use specific AI platform features**: Some platforms have "copy code" buttons on code blocks

        ---

        ## AI Enhancement Examples

        ### User Input:
        "add dark mode"

        ### AI Enhanced Output:
        ```markdown
        feat: implement dark mode theme support

        **Problem Statement**
        Users working in low-light environments experience eye strain with the current light-only interface. Modern applications are expected to support user preference for dark themes, and this feature would improve accessibility and user experience across different lighting conditions.

        **Proposed Solution**
        Implement a system-wide dark mode theme that:
        - Respects user's OS-level dark mode preference by default
        - Provides manual toggle override in settings
        - Uses semantic color tokens for consistent theming
        - Maintains WCAG contrast ratios for accessibility
        - Persists user's choice in local storage
        - Smoothly transitions between themes

        **Priority**
        Medium - Improves user experience and modernizes the application, but doesn't block core functionality

        **Additional Context**
        Consider implementing CSS custom properties for theme switching. May require audit of existing color usage throughout the codebase. Should test with various screen readers to ensure accessibility compliance.
        ```

        ### User Input:
        "app crashes sometimes"

        ### AI Enhanced Output:
        ```markdown
        fix: investigate intermittent application crashes

        **Bug Description**
        Application experiences unexpected crashes during normal usage, potentially affecting user data and productivity.

        **Steps to Reproduce**
        Currently unclear - requires investigation to identify specific trigger conditions

        **Expected Behavior**
        Application should remain stable during all normal user interactions

        **Actual Behavior**
        Application terminates unexpectedly, potentially losing unsaved work

        **Severity**
        High - Data loss risk and poor user experience

        **Version**
        _Needs user input_

        **OS**
        _Needs user input_

        **Additional Context**
        Need crash logs and specific reproduction steps. Consider implementing crash reporting service if not already present. Priority should be identifying patterns in crash occurrences.
        ```

        ---

        ## 🎯 AI Success Criteria

        A successful AI-enhanced issue should:
        - ✅ Be immediately actionable for developers
        - ✅ Include technical implementation hints
        - ✅ Anticipate potential challenges
        - ✅ Use precise, professional language
        - ✅ Provide business/technical context
        - ✅ Help developers understand the "why" not just the "what"

        **Remember: You're not just transcribing user input - you're translating it into developer-ready specifications.**

        ---

        End of guide.
    validations:
      required: false
